 --
 -- This file is part of D²CTS : Dynamic and Distributed Container Terminal Simulator.
 --
 -- Copyright (C) 2009-2013  Gaëtan Lesauvage
 --
 -- This program is free software; -- you can redistribute it and/or
 -- modify it under the terms of the GNU General Public License
 -- as published by the Free Software Foundation; -- either version 2
 -- of the License, or (at your option) any later version.
 --
 -- This program is distributed in the hope that it will be useful,
 -- but WITHOUT ANY WARRANTY; -- without even the implied warranty of
 -- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 -- GNU General Public License for more details.
 --
 -- You should have received a copy of the GNU General Public License
 -- along with this program; 
 -- if not, write to the Free Software
 -- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 --

-- ----------------------------------------------- --
-- ------- TERMINALDB CREATION SQL SCRIPT -------- --
-- ------- -> Author: G. Lesauvage        -------- --
-- ------- -> Since: May 2013             -------- --
-- ------- -> Language: MySQL 5.1         -------- --
-- ----------------------------------------------- --

CREATE DATABASE IF NOT EXISTS TERMINALDB;
GRANT ALL ON TERMINALDB.* TO 'd2cts'@'localhost';

USE TERMINALDB;


DROP TABLE IF EXISTS DEFAULT_SCHEDULING_PARAMETERS;
DROP TABLE IF EXISTS ROADPOINTS;
DROP TABLE IF EXISTS STRADDLECARRIERS_LOCATION;
DROP TABLE IF EXISTS STRADDLECARRIERS_WORKLOAD;
DROP TABLE IF EXISTS MISSION_LOAD;
DROP TABLE IF EXISTS CONTAINERS_LOCATION;
DROP TABLE IF EXISTS CONTAINERS_INIT_LOCATION;
DROP TABLE IF EXISTS STRADDLECARRIER;
DROP TABLE IF EXISTS MISSION;
DROP TABLE IF EXISTS SLOT_LEVEL;
DROP TABLE IF EXISTS SLOT;
DROP TABLE IF EXISTS ROAD;
DROP TABLE IF EXISTS CROSSROAD;
DROP TABLE IF EXISTS LASERHEAD;
DROP TABLE IF EXISTS SLOT_CONTENT;
DROP TABLE IF EXISTS CONTAINER;
DROP TABLE IF EXISTS STRADDLECARRIER_MODEL;
DROP TABLE IF EXISTS EVENT;
DROP TABLE IF EXISTS BLOCK_WALL;
DROP TABLE IF EXISTS BLOCK_WALL_POINT;
DROP TABLE IF EXISTS BLOCK;
DROP TABLE IF EXISTS LOAD_PHASE;
DROP TABLE IF EXISTS LOAD_STATE;
DROP TABLE IF EXISTS MISSION_TYPE;
DROP TABLE IF EXISTS EVENT_TYPE;
DROP TABLE IF EXISTS ROUTING_ALGORITHM;
DROP TABLE IF EXISTS AVAILABILITY;
DROP TABLE IF EXISTS ALIGNMENT;
DROP TABLE IF EXISTS CONTAINER_TYPE;
DROP TABLE IF EXISTS SEA_ORIENTATION;
DROP TABLE IF EXISTS BLOCK_TYPE;
DROP TABLE IF EXISTS ROAD_TYPE;
DROP TABLE IF EXISTS CROSSROAD_TYPE;
DROP TABLE IF EXISTS SIMULATION_SCHEDULING_PARAMETERS;
DROP TABLE IF EXISTS SCHEDULING_PARAMETER;
DROP TABLE IF EXISTS RESULTS; -- Table des resultats de simulation
DROP TABLE IF EXISTS SIMULATION;
DROP TABLE IF EXISTS SCHEDULING_ALGORITHM;
DROP TABLE IF EXISTS SCENARIO;
DROP TABLE IF EXISTS TERMINAL;

CREATE TABLE TERMINAL(
  ID smallint(6) unsigned NOT NULL AUTO_INCREMENT,
  DATE_REC timestamp DEFAULT current_timestamp(),
  NAME varchar(510),
  FILE varchar(300),
  LABEL varchar(255),
  PRIMARY KEY(ID)
) ENGINE=InnoDB AUTO_INCREMENT=1;

CREATE TABLE SCENARIO(
  ID smallint(6) unsigned NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(510) not null,
  DATE_REC timestamp DEFAULT current_timestamp(),
  TERMINAL smallint(6) unsigned NOT NULL,
  FILE varchar(300),
  PRIMARY KEY(ID),
  INDEX (TERMINAL),
  CONSTRAINT FOREIGN KEY (TERMINAL) REFERENCES TERMINAL(ID) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1;


USE TERMINALDB;

CREATE TABLE SCHEDULING_ALGORITHM (
ID smallint(6) unsigned AUTO_INCREMENT NOT NULL,
NAME VARCHAR(30) NOT NULL,
CLASS VARCHAR(255) NOT NULL,
PRIMARY KEY (ID)
) ENGINE=InnoDB;

INSERT INTO SCHEDULING_ALGORITHM(NAME, CLASS) VALUES ('LinearMissionScheduler','org.scheduling.LinearMissionScheduler');
-- INSERT INTO SCHEDULING_ALGORITHM(NAME, CLASS) VALUES ('BB','org.scheduling.bb.BB');
INSERT INTO SCHEDULING_ALGORITHM(NAME, CLASS) VALUES ('BranchAndBound','org.scheduling.branchAndBound.BranchAndBound');
INSERT INTO SCHEDULING_ALGORITHM(NAME, CLASS) VALUES ('GreedyMissionScheduler','org.scheduling.greedy.GreedyMissionScheduler');
INSERT INTO SCHEDULING_ALGORITHM(NAME, CLASS) VALUES ('OfflineACOScheduler','org.scheduling.offlineACO.OfflineACOScheduler');
INSERT INTO SCHEDULING_ALGORITHM(NAME, CLASS) VALUES ('OfflineACOScheduler2','org.scheduling.offlineACO2.OfflineACOScheduler2');
INSERT INTO SCHEDULING_ALGORITHM(NAME, CLASS) VALUES ('OnlineACOScheduler','org.scheduling.offlineACO2.OnlineACOScheduler');
INSERT INTO SCHEDULING_ALGORITHM(NAME, CLASS) VALUES ('RandomMissionScheduler','org.scheduling.random.RandomMissionScheduler');

-- a simulation is composed by at least a terminal and more likely a scenario
CREATE TABLE SIMULATION(
  ID smallint(6) unsigned NOT NULL AUTO_INCREMENT,
  DATE_REC timestamp NOT NULL,
  CONTENT smallint(6) unsigned NULL REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  SCHEDULING_ALGORITHM smallint(6) unsigned NULL REFERENCES SCHEDULING_ALGORITHM(ID) ON DELETE CASCADE,
  SEED double NULL,
  PRIMARY KEY(ID),
  INDEX(CONTENT,SCHEDULING_ALGORITHM),
  CONSTRAINT FOREIGN KEY (CONTENT) REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (SCHEDULING_ALGORITHM) REFERENCES SCHEDULING_ALGORITHM(ID) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1;


-- -------------------------------------------------------------------------------------- --
-- |				TERMINAL STRUCTURE					| --
-- -------------------------------------------------------------------------------------- --

-- 		----------------------------------------------------------------- 	  --
-- 		|			TYPES DEFINITION			| 	  --
-- 		----------------------------------------------------------------- 	  --
CREATE TABLE CROSSROAD_TYPE(
  ID smallint(1) unsigned NOT NULL AUTO_INCREMENT,
  CLASS_NAME VARCHAR(255) NOT NULL,
  PRIMARY KEY(ID,CLASS_NAME)
) ENGINE=InnoDB AUTO_INCREMENT=1;

INSERT INTO CROSSROAD_TYPE (CLASS_NAME) VALUES ('org.system.Crossroad');
INSERT INTO CROSSROAD_TYPE (CLASS_NAME) VALUES ('org.system.container_stocking.BayCrossroad');

CREATE TABLE ROAD_TYPE(
  ID smallint(1) unsigned NOT NULL AUTO_INCREMENT,
  CLASS_NAME VARCHAR(255) NOT NULL,
  PRIMARY KEY(ID,CLASS_NAME)
) ENGINE=InnoDB AUTO_INCREMENT=1;

INSERT INTO ROAD_TYPE (CLASS_NAME) VALUES ('org.system.Road');
INSERT INTO ROAD_TYPE (CLASS_NAME) VALUES ('org.system.container_stocking.Bay');
INSERT INTO ROAD_TYPE (CLASS_NAME) VALUES ('org.system.StraddleCarrierSlot');
-- INSERT INTO ROAD_TYPE (CLASS_NAME) VALUES ('org.system.container_stocking.ExchangeBay');

CREATE TABLE BLOCK_TYPE(
  ID smallint(1) unsigned NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(20) NOT NULL,
  ENUM_NAME VARCHAR(255) NOT NULL,
  PRIMARY KEY(ID,ENUM_NAME)
) ENGINE=InnoDB AUTO_INCREMENT=1;

INSERT INTO BLOCK_TYPE (NAME,ENUM_NAME) VALUES ('SHIP','org.system.container_stocking.BlockType.SHIP');
INSERT INTO BLOCK_TYPE (NAME,ENUM_NAME) VALUES ('YARD','org.system.container_stocking.BlockType.YARD');
INSERT INTO BLOCK_TYPE (NAME,ENUM_NAME) VALUES ('ROAD','org.system.container_stocking.BlockType.ROAD');
INSERT INTO BLOCK_TYPE (NAME,ENUM_NAME) VALUES ('RAILWAY','org.system.container_stocking.BlockType.RAILWAY');
INSERT INTO BLOCK_TYPE (NAME,ENUM_NAME) VALUES ('DEPOT','org.system.container_stocking.BlockType.DEPOT');

CREATE TABLE SEA_ORIENTATION(
  ID smallint(1) unsigned NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(10) NOT NULL,
  ENUM_NAME VARCHAR(255) NOT NULL,
  PRIMARY KEY(ID)
) ENGINE=InnoDB AUTO_INCREMENT=1;

INSERT INTO SEA_ORIENTATION (NAME,ENUM_NAME) VALUES ('NORTH','org.system.container_stocking.SeaOrientation.N');
INSERT INTO SEA_ORIENTATION (NAME,ENUM_NAME) VALUES ('EAST','org.system.container_stocking.SeaOrientation.E');
INSERT INTO SEA_ORIENTATION (NAME,ENUM_NAME) VALUES ('SOUTH','org.system.container_stocking.SeaOrientation.S');
INSERT INTO SEA_ORIENTATION (NAME,ENUM_NAME) VALUES ('WEST','org.system.container_stocking.SeaOrientation.W');
INSERT INTO SEA_ORIENTATION (NAME,ENUM_NAME) VALUES ('NORTH EAST','org.system.container_stocking.SeaOrientation.NE');
INSERT INTO SEA_ORIENTATION (NAME,ENUM_NAME) VALUES ('SOUTH EAST','org.system.container_stocking.SeaOrientation.SE');
INSERT INTO SEA_ORIENTATION (NAME,ENUM_NAME) VALUES ('SOUTH WEST','org.system.container_stocking.SeaOrientation.SW');
INSERT INTO SEA_ORIENTATION (NAME,ENUM_NAME) VALUES ('NORTH WEST','org.system.container_stocking.SeaOrientation.NW');

CREATE TABLE CONTAINER_TYPE(
  ID smallint(1) unsigned NOT NULL,
  ENUM_NAME VARCHAR(255) NOT NULL,
  TEU DOUBLE NOT NULL,
  LENGTH DOUBLE NOT NULL,
  WIDTH DOUBLE NOT NULL,
  HEIGHT DOUBLE NOT NULL,
  LABEL VARCHAR(30) NOT NULL,
  PRIMARY KEY(ID)
) ENGINE=InnoDB;

INSERT INTO CONTAINER_TYPE (ID,ENUM_NAME,TEU,LENGTH,WIDTH,HEIGHT,LABEL) VALUES (0,'org.system.container_stocking.ContainerKind',2.0,12.192,2.438,2.591,'40 feet');
INSERT INTO CONTAINER_TYPE (ID,ENUM_NAME,TEU,LENGTH,WIDTH,HEIGHT,LABEL) VALUES (1,'org.system.container_stocking.ContainerKind',1.0,6.058,2.438,2.591,'20 feet');
INSERT INTO CONTAINER_TYPE (ID,ENUM_NAME,TEU,LENGTH,WIDTH,HEIGHT,LABEL) VALUES (2,'org.system.container_stocking.ContainerKind',2.25,13.716,2.438,2.896,'45 feet');

CREATE TABLE ALIGNMENT(
  ID smallint(1) NOT NULL,
  ENUM_NAME VARCHAR(255) NOT NULL,
  LABEL VARCHAR(30) NOT NULL,
  PRIMARY KEY(ID)
) ENGINE=InnoDB;

INSERT INTO ALIGNMENT (ID,ENUM_NAME,LABEL) VALUES (-1,'org.system.container_stocking.ContainerAlignment.origin','origin');
INSERT INTO ALIGNMENT (ID,ENUM_NAME,LABEL) VALUES (0,'org.system.container_stocking.ContainerAlignment.center','center');
INSERT INTO ALIGNMENT (ID,ENUM_NAME,LABEL) VALUES (1,'org.system.container_stocking.ContainerAlignment.destination','destination');

CREATE TABLE AVAILABILITY(
  ID smallint(1) unsigned NOT NULL,
  LABEL VARCHAR(255) NOT NULL,
  PRIMARY KEY(ID)
) ENGINE=InnoDB;

INSERT INTO AVAILABILITY (ID,LABEL) VALUES (0,'AVAILABLE');
INSERT INTO AVAILABILITY (ID,LABEL) VALUES (1,'SPREADER FAILURE');
INSERT INTO AVAILABILITY (ID,LABEL) VALUES (2,'ENGINE FAILURE');

CREATE TABLE ROUTING_ALGORITHM(
  NAME VARCHAR(30) NOT NULL,
  HEURISTIC VARCHAR(30) NULL,
  PRIMARY KEY(NAME,HEURISTIC)
) ENGINE=InnoDB;

INSERT INTO ROUTING_ALGORITHM (NAME) VALUES('RDijkstra');
INSERT INTO ROUTING_ALGORITHM (NAME) VALUES('APSP');
INSERT INTO ROUTING_ALGORITHM (NAME) VALUES('Dijkstra');
INSERT INTO ROUTING_ALGORITHM (NAME,HEURISTIC) VALUES('AStar','DijkstraHeuristic');
INSERT INTO ROUTING_ALGORITHM (NAME,HEURISTIC) VALUES('AStar','DistanceAndSpeedHeuristic');
INSERT INTO ROUTING_ALGORITHM (NAME,HEURISTIC) VALUES('AStar','YDistanceHeuristic');

CREATE TABLE EVENT_TYPE(
  NAME VARCHAR(30) NOT NULL,
  CLASS_NAME VARCHAR(255) NOT NULL,
  PRIMARY KEY(NAME)
) ENGINE=InnoDB;

INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('AffectMission','org.time.event.AffectMission');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('ChangeContainerLocation','org.time.event.ChangeContainerLocation');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('ContainerOut','org.time.event.ContainerOut');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('LaserHeadFailure','org.time.event.LaserHeadFailure');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('NewContainer','org.time.event.NewContainer');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('NewMission','org.time.event.NewMission');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('NewShipContainer','org.time.event.NewShipContainer');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('ShipContainerOut','org.time.event.ShipContainerOut');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('ShipIn','org.time.event.ShipIn');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('ShipOut','org.time.event.ShipOut');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('StraddleCarrierFailure','org.time.event.StraddleCarrierFailure');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('StraddleCarrierRepaired','org.time.event.StraddleCarrierRepaired');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('VehicleIn','org.time.event.VehicleIn');
INSERT INTO EVENT_TYPE (NAME, CLASS_NAME) VALUES ('VehicleOut','org.time.event.VehicleOut');

-- USE TERMINALDB;
-- DROP TABLE IF EXISTS MISSION_TYPE;
CREATE TABLE MISSION_TYPE(
  ID smallint(1) unsigned NOT NULL,
  PICKUP_PENALTY smallint(1) not null,
  DELIVERY_PENALTY smallint(1) not null,
  ENUM_NAME VARCHAR(255) not null,
  PRIMARY KEY(ID)
) ENGINE=InnoDB;

INSERT INTO MISSION_TYPE(ID,PICKUP_PENALTY,DELIVERY_PENALTY,ENUM_NAME) VALUES (0,1,1,'org.missions.MissionKinds.STAY');
INSERT INTO MISSION_TYPE(ID,PICKUP_PENALTY,DELIVERY_PENALTY,ENUM_NAME) VALUES (1,1,1,'org.missions.MissionKinds.IN');
INSERT INTO MISSION_TYPE(ID,PICKUP_PENALTY,DELIVERY_PENALTY,ENUM_NAME) VALUES (2,1,1,'org.missions.MissionKinds.OUT');
INSERT INTO MISSION_TYPE(ID,PICKUP_PENALTY,DELIVERY_PENALTY,ENUM_NAME) VALUES (3,1,1,'org.missions.MissionKinds.IN_AND_OUT');

CREATE TABLE LOAD_STATE(
	ID smallint(1) not null,
	CLASS_NAME VARCHAR(255) not null,
	PRIMARY KEY(ID)
) ENGINE=InnoDB;

INSERT INTO LOAD_STATE (ID,CLASS_NAME) VALUES (0,'org.missions.Load.STATE_CURRENT');
INSERT INTO LOAD_STATE (ID,CLASS_NAME) VALUES (-1,'org.missions.Load.STATE_ACHIEVED');
INSERT INTO LOAD_STATE (ID,CLASS_NAME) VALUES (1,'org.missions.Load.STATE_TODO');

CREATE TABLE LOAD_PHASE(
	ID smallint(1) unsigned not null,
	CLASS_NAME VARCHAR(255) not null,
	PRIMARY KEY(ID)
) ENGINE=InnoDB;

INSERT INTO LOAD_PHASE(ID,CLASS_NAME) VALUES (0,'org.missions.Load.PHASE_PICKUP');
INSERT INTO LOAD_PHASE(ID,CLASS_NAME) VALUES (1,'org.missions.Load.PHASE_LOAD');
INSERT INTO LOAD_PHASE(ID,CLASS_NAME) VALUES (2,'org.missions.Load.PHASE_DELIVERY');
INSERT INTO LOAD_PHASE(ID,CLASS_NAME) VALUES (3,'org.missions.Load.PHASE_UNLOAD');

-- 		----------------------------------------------------------------- 	  --
-- 		|			BLOCKS					| 	  --
-- 		----------------------------------------------------------------- 	  --
CREATE TABLE BLOCK_WALL_POINT(
  NAME VARCHAR(30) not null,
  TERMINAL smallint(6) unsigned not null REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  X DOUBLE not null,
  Y DOUBLE not null,
  Z DOUBLE DEFAULT 0.0 not null,
  PRIMARY KEY(NAME,TERMINAL),
  CONSTRAINT FOREIGN KEY (TERMINAL) REFERENCES TERMINAL(ID) ON DELETE CASCADE
) ENGINE=InnoDB;


CREATE TABLE BLOCK(
  NAME VARCHAR(10) not null,
  TERMINAL smallint(6) unsigned not null REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  TYPE smallint(1) unsigned not null REFERENCES BLOCK_TYPE(ID) ON DELETE CASCADE,
  SEA_ORIENTATION smallint(1) unsigned null REFERENCES SEA_ORIENTATION(ID) ON DELETE CASCADE,
  BORDER_ROAD VARCHAR(30) null REFERENCES ROAD(NAME) ON DELETE CASCADE,	-- TODO watchout because ROAD has reference toward BLOCK too!
  PRIMARY KEY(NAME,TERMINAL),
  INDEX(TYPE,SEA_ORIENTATION,BORDER_ROAD),
  CONSTRAINT FOREIGN KEY (TERMINAL) REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (TYPE) REFERENCES BLOCK_TYPE(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (SEA_ORIENTATION) REFERENCES SEA_ORIENTATION(ID) ON DELETE CASCADE
  -- CONSTRAINT FOREIGN KEY (BORDER_ROAD) REFERENCES ROAD(NAME) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE BLOCK_WALL(
  BLOCK_NAME VARCHAR(10) not null REFERENCES BLOCK(NAME) ON DELETE CASCADE,
  TERMINAL smallint(6) unsigned not null REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  WALL_POINT_1 VARCHAR(30) not null REFERENCES BLOCK_WALL_POINT(NAME) ON DELETE CASCADE, 
  WALL_POINT_2 VARCHAR(30) not null REFERENCES BLOCK_WALL_POINT(NAME) ON DELETE CASCADE, 
  PRIMARY KEY(BLOCK_NAME,TERMINAL,WALL_POINT_1,WALL_POINT_2),
  CONSTRAINT FOREIGN KEY (BLOCK_NAME) REFERENCES BLOCK(NAME) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (TERMINAL) REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (WALL_POINT_1,TERMINAL) REFERENCES BLOCK_WALL_POINT(NAME,TERMINAL) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (WALL_POINT_2,TERMINAL) REFERENCES BLOCK_WALL_POINT(NAME,TERMINAL) ON DELETE CASCADE
) ENGINE=InnoDB;

-- 		---------------------------------------------------------------- 	  --
-- 		|			NETWORK					| 	  --
-- 		---------------------------------------------------------------- 	  --
-- Crossroads
CREATE TABLE CROSSROAD (
  NAME VARCHAR(30) not null,
  TERMINAL smallint(6) unsigned not null REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  TYPE smallint(1) unsigned not null REFERENCES CROSSROAD_TYPE(ID) ON DELETE CASCADE,
  X DOUBLE not null,
  Y DOUBLE not null,
  Z DOUBLE DEFAULT 0 null,
  ROAD VARCHAR(30) null,
  BLOCK VARCHAR(30) null,
  PRIMARY KEY(NAME,TERMINAL),
  INDEX(TYPE),
  CONSTRAINT FOREIGN KEY (TERMINAL) REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (TYPE) REFERENCES CROSSROAD_TYPE(ID) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Roads
CREATE TABLE ROAD (
  NAME VARCHAR(30) not null,
  TERMINAL smallint(6) unsigned not null REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  TYPE smallint(1) unsigned not null REFERENCES ROAD_TYPE(ID) ON DELETE CASCADE,
  ORIGIN VARCHAR(30) not null REFERENCES CROSSROAD(NAME) ON DELETE CASCADE,
  DESTINATION VARCHAR(30) not null REFERENCES CROSSROAD(NAME) ON DELETE CASCADE,
  DIRECTED BOOLEAN DEFAULT FALSE null,
  BLOCK VARCHAR(10) null REFERENCES BLOCK(NAME) ON DELETE CASCADE,
  BAY_GROUP VARCHAR(30) null,
  PRIMARY KEY(NAME,TERMINAL),
  INDEX(TYPE,ORIGIN,DESTINATION,BLOCK),
  CONSTRAINT FOREIGN KEY (TERMINAL) REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (TYPE) REFERENCES ROAD_TYPE(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (TERMINAL,ORIGIN) REFERENCES CROSSROAD(TERMINAL,NAME) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (TERMINAL,DESTINATION) REFERENCES CROSSROAD(TERMINAL,NAME) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (TERMINAL,BLOCK) REFERENCES BLOCK(TERMINAL,NAME) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Road points
CREATE TABLE ROADPOINTS(
  NAME VARCHAR(30) not null,
  TERMINAL smallint(6) unsigned not null REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  ROAD VARCHAR(30) not null REFERENCES ROAD(NAME) ON DELETE CASCADE,
  INDEX_IN_ROAD INTEGER not null,
  X DOUBLE not null,
  Y DOUBLE not null,
  Z DOUBLE DEFAULT 0 null,
  PRIMARY KEY(NAME,TERMINAL),
  INDEX(ROAD),
  CONSTRAINT FOREIGN KEY (TERMINAL) REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (ROAD,TERMINAL) REFERENCES ROAD(NAME,TERMINAL) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Slots
CREATE TABLE SLOT(
  NAME VARCHAR(50) not null,
  TERMINAL smallint(6) unsigned not null REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  BAY VARCHAR(30) not null REFERENCES ROAD(NAME) ON DELETE CASCADE,
  LEN smallint(1) unsigned not null REFERENCES CONTAINER_TYPE(ID) ON DELETE CASCADE,
  RATE DOUBLE not null,
  PRIMARY KEY(NAME,TERMINAL),
  INDEX(BAY,LEN),
  CONSTRAINT FOREIGN KEY (TERMINAL) REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (BAY,TERMINAL) REFERENCES ROAD(NAME,TERMINAL) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (LEN) REFERENCES CONTAINER_TYPE(ID) ON DELETE CASCADE
) ENGINE=InnoDB;

-- SLot level
CREATE TABLE SLOT_LEVEL(
  NAME VARCHAR(55) not null,
  TERMINAL smallint(6) unsigned not null REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  SLOT VARCHAR(30) not null REFERENCES SLOT(NAME) ON DELETE CASCADE,
  LEVEL_NUMBER INTEGER not null,
  PRIMARY KEY(NAME,TERMINAL),
  INDEX(SLOT),
  CONSTRAINT FOREIGN KEY (TERMINAL) REFERENCES TERMINAL(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (SLOT,TERMINAL) REFERENCES SLOT(NAME,TERMINAL) ON DELETE CASCADE
) ENGINE=InnoDB;

-- -------------------------------------------------------------------------------------- --
-- |					SCENARIO					| --
-- -------------------------------------------------------------------------------------- --
CREATE TABLE LASERHEAD(
  NAME VARCHAR(30) not null,
  SCENARIO smallint(6) unsigned not null REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  X DOUBLE not null,
  Y DOUBLE not null,
  Z DOUBLE DEFAULT 0 null,
  RX DOUBLE not null,
  RY DOUBLE not null,
  RZ DOUBLE DEFAULT 0 null,
  PRIMARY KEY(NAME,SCENARIO),
  CONSTRAINT FOREIGN KEY (SCENARIO) REFERENCES SCENARIO(ID) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE CONTAINER(
  NAME VARCHAR(30) not null,
  TYPE smallint(1) unsigned null REFERENCES CONTAINER_TYPE(ID) ON DELETE CASCADE,
  SCENARIO smallint(6) unsigned not null REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  PRIMARY KEY(NAME,SCENARIO),
  INDEX(TYPE),
  CONSTRAINT FOREIGN KEY (SCENARIO) REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (TYPE) REFERENCES CONTAINER_TYPE(ID) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE STRADDLECARRIER_MODEL(
  NAME VARCHAR(15) not null,
  WIDTH DOUBLE not null,
  HEIGHT DOUBLE not null,
  LENGTH DOUBLE not null,
  INNER_WIDTH DOUBLE not null,
  INNER_LENGTH DOUBLE not null,
  BACK_OVER_LENGTH DOUBLE not null,
  FRONT_OVER_LENGTH DOUBLE not null,
  CAB_WIDTH DOUBLE not null,
  COMPATIBILITY VARCHAR(10) not null,
  EMPTY_SPEED DOUBLE not null,
  LOADED_SPEED DOUBLE not null,
  BAY_SPEED DOUBLE not null,
  CONTAINER_HANDLING_FROM_TRUCK_MIN DOUBLE not null,
  CONTAINER_HANDLING_FROM_TRUCK_MAX DOUBLE not null,
  CONTAINER_HANDLING_FROM_GROUND_MIN DOUBLE not null,
  CONTAINER_HANDLING_FROM_GROUND_MAX DOUBLE not null,
  ENTER_EXIT_BAY_TIME_MIN DOUBLE not null,
  ENTER_EXIT_BAY_TIME_MAX DOUBLE not null,
  TURN_BACK_TIME DOUBLE not null,
  PRIMARY KEY(NAME)
) ENGINE=InnoDB;

CREATE TABLE STRADDLECARRIER(
  NAME VARCHAR(30) not null,
  SCENARIO smallint(6) unsigned not null REFERENCES SCENARIO(ID) ON DELETE CASCADE,  
  MODEL VARCHAR(15) not null REFERENCES STRADDLECARRIER_MODEL(NAME) ON DELETE CASCADE,
  COLOR VARCHAR(15) not null,
  SLOT VARCHAR(30) not null REFERENCES ROAD(NAME) ON DELETE CASCADE,
  ORIGIN_ROAD VARCHAR(30) REFERENCES ROAD(NAME) ON DELETE CASCADE,
  ORIGIN_RATE DOUBLE default 0.5 not null,
  ORIGIN_DIRECTION BOOLEAN DEFAULT true not null,
  ORIGIN_AVAILABILITY smallint(1) unsigned  DEFAULT 0 null REFERENCES AVAILABILITY(ID) ON DELETE CASCADE,
  AUTOHANDLING BOOLEAN DEFAULT true null,
  ROUTING_ALGORITHM VARCHAR(30) null REFERENCES ROUTING_ALGORITHM(NAME) ON DELETE CASCADE,
  ROUTING_HEURISTIC VARCHAR(30) null REFERENCES ROUTING_ALGORITHM(HEURISTIC) ON DELETE CASCADE,
  PRIMARY KEY(NAME,SCENARIO),
  INDEX(MODEL,SLOT,ORIGIN_ROAD,ORIGIN_AVAILABILITY,ROUTING_ALGORITHM,ROUTING_HEURISTIC),
  CONSTRAINT FOREIGN KEY (SCENARIO) REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (MODEL) REFERENCES STRADDLECARRIER_MODEL(NAME) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (SLOT) REFERENCES ROAD(NAME) ON DELETE CASCADE, -- todo scenario.terminal
  CONSTRAINT FOREIGN KEY (ORIGIN_ROAD) REFERENCES ROAD(NAME) ON DELETE CASCADE, -- todo scenario.terminal
  CONSTRAINT FOREIGN KEY (ORIGIN_AVAILABILITY) REFERENCES AVAILABILITY(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (ROUTING_ALGORITHM,ROUTING_HEURISTIC) REFERENCES ROUTING_ALGORITHM(NAME,HEURISTIC) ON DELETE CASCADE
) ENGINE=InnoDB;

-- This table will be use to locate container at the very begining of the simulation. When 
-- the simulation starts, the content of this table will be copied into the simulation's 
-- CONTAINER_LOCATION table.

CREATE TABLE CONTAINERS_INIT_LOCATION(
  CONTAINER_NAME VARCHAR(30) not null,
  SCENARIO smallint(6) unsigned not null REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  SLOT_LEVEL VARCHAR(55) null REFERENCES SLOT_LEVEL(NAME) ON DELETE CASCADE,
  SLOT_ALIGNMENT smallint(1) default 0 null REFERENCES ALIGNMENT(ID) ON DELETE CASCADE,
  VEHICLE VARCHAR(30) null REFERENCES STRADDLECARRIER(NAME) ON DELETE CASCADE,
  PRIMARY KEY(CONTAINER_NAME,SCENARIO),
  INDEX(SLOT_LEVEL,SLOT_ALIGNMENT,VEHICLE),
  CONSTRAINT FOREIGN KEY (SCENARIO) REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (SLOT_LEVEL) REFERENCES SLOT_LEVEL(NAME) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (SLOT_ALIGNMENT) REFERENCES ALIGNMENT(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (VEHICLE,SCENARIO) REFERENCES STRADDLECARRIER(NAME,SCENARIO) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE EVENT(
  ID smallint(6) unsigned AUTO_INCREMENT not null,
  TYPE VARCHAR(30) not null REFERENCES EVENT_TYPE(NAME) ON DELETE CASCADE,
  SCENARIO smallint(6) unsigned not null REFERENCES SCENARIO(ID) ON DELETE CASCADE,  
  T TIME not null,
  DESCRIPTION VARCHAR(3000) not null,
  PRIMARY KEY(ID),
  INDEX(SCENARIO,TYPE,T),
  CONSTRAINT FOREIGN KEY (SCENARIO) REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (TYPE) REFERENCES EVENT_TYPE(NAME) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1;


CREATE TABLE MISSION(
  NAME VARCHAR(30) not null,
  SCENARIO smallint(6) unsigned not null REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  TYPE smallint(1) unsigned not null REFERENCES MISSION_TYPE(ID) ON DELETE CASCADE,
  CONTAINER VARCHAR(30) not null REFERENCES CONTAINER(NAME) ON DELETE CASCADE,
  TRUCK VARCHAR(30) null,
  TW_P_MIN TIME not null,
  TW_P_MAX TIME not null,
  TW_D_MIN TIME not null,
  TW_D_MAX TIME not null,
  SLOT_LEVEL_DESTINATION VARCHAR(55) not null REFERENCES SLOT_LEVEL(NAME) ON DELETE CASCADE,
  SLOT_ALIGNMENT smallint(1) not null REFERENCES ALIGNMENT(ID) ON DELETE CASCADE,
  PRIMARY KEY(NAME,SCENARIO),
  INDEX(TYPE,CONTAINER,SLOT_LEVEL_DESTINATION,SLOT_ALIGNMENT),
  CONSTRAINT FOREIGN KEY (SCENARIO) REFERENCES SCENARIO(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (TYPE) REFERENCES MISSION_TYPE(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (CONTAINER,SCENARIO) REFERENCES CONTAINER(NAME,SCENARIO) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (SLOT_LEVEL_DESTINATION) REFERENCES SLOT_LEVEL(NAME) ON DELETE CASCADE, -- todo : scenario.terminal
  CONSTRAINT FOREIGN KEY (SLOT_ALIGNMENT) REFERENCES ALIGNMENT(ID) ON DELETE CASCADE
) ENGINE=InnoDB;

-- -------------------------------------------------------------------------------------- --
-- |					SIMULATION					| --
-- -------------------------------------------------------------------------------------- --
-- DROP TABLE IF EXISTS CONTAINERS_LOCATION;
CREATE TABLE CONTAINERS_LOCATION(
  CONTAINER_NAME VARCHAR(30) not null REFERENCES CONTAINER(NAME) ON DELETE CASCADE,
  SIMULATION smallint(6) unsigned not null REFERENCES SIMULATION(ID) ON DELETE CASCADE,
  T TIME not null,
  SLOT_LEVEL VARCHAR(55) null REFERENCES SLOT_LEVEL(NAME) ON DELETE CASCADE,
  SLOT_LEVEL_ALIGNMENT smallint(1) default 0 null REFERENCES ALIGNMENT(ID) ON DELETE CASCADE,
  VEHICLE VARCHAR(30) null REFERENCES STRADDLECARRIER(NAME) ON DELETE CASCADE,
  PRIMARY KEY(CONTAINER_NAME,SIMULATION,T),
  INDEX(SLOT_LEVEL,SLOT_LEVEL_ALIGNMENT,VEHICLE),
  CONSTRAINT FOREIGN KEY (SIMULATION) REFERENCES SIMULATION(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (CONTAINER_NAME) REFERENCES CONTAINER(NAME) ON DELETE CASCADE, -- todo simulation.scenario
  CONSTRAINT FOREIGN KEY (SLOT_LEVEL) REFERENCES SLOT_LEVEL(NAME) ON DELETE CASCADE, -- todo : simulation.scenario.terminal
  CONSTRAINT FOREIGN KEY (SLOT_LEVEL_ALIGNMENT) REFERENCES ALIGNMENT(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (VEHICLE) REFERENCES STRADDLECARRIER(NAME) ON DELETE CASCADE -- todo : simulation.scenario
) ENGINE=InnoDB;

CREATE TABLE SLOT_CONTENT(
	SLOT_LEVEL VARCHAR(55),
	SIMULATION smallint(6) unsigned not null REFERENCES SIMULATION(ID) ON DELETE CASCADE,
	T TIME not null,
	CONTAINER1 VARCHAR(30) null REFERENCES CONTAINER(NAME) ON DELETE CASCADE,
  	CONTAINER2 VARCHAR(30) null REFERENCES CONTAINER(NAME) ON DELETE CASCADE,
  	PRIMARY KEY(SLOT_LEVEL,SIMULATION,T),
  	INDEX(CONTAINER1,CONTAINER2),
  	CONSTRAINT FOREIGN KEY (SIMULATION) REFERENCES SIMULATION(ID) ON DELETE CASCADE,
  	CONSTRAINT FOREIGN KEY (CONTAINER1) REFERENCES CONTAINER(NAME) ON DELETE CASCADE, -- todo : simulation.scenario.terminal
  	CONSTRAINT FOREIGN KEY (CONTAINER2) REFERENCES CONTAINER(NAME) ON DELETE CASCADE -- todo : simulation.scenario.terminal
) ENGINE=InnoDB;

CREATE TABLE STRADDLECARRIERS_LOCATION(
  STRADDLECARRIER_NAME VARCHAR(30) not null REFERENCES STRADDLECARRIER(NAME) ON DELETE CASCADE,
  SIMULATION smallint(6) unsigned not null REFERENCES SIMULATION(ID) ON DELETE CASCADE,
  T TIME not null,
  ROAD VARCHAR(30) not null REFERENCES ROAD(NAME) ON DELETE CASCADE,
  DIRECTION BOOLEAN not null,
  X DOUBLE not null,
  Y DOUBLE not null,
  Z DOUBLE DEFAULT 0.0 null,
  PRIMARY KEY(STRADDLECARRIER_NAME,SIMULATION,T),
  INDEX(ROAD),
  CONSTRAINT FOREIGN KEY (SIMULATION) REFERENCES SIMULATION(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (STRADDLECARRIER_NAME) REFERENCES STRADDLECARRIER(NAME) ON DELETE CASCADE, -- todo simulation.scenario
  CONSTRAINT FOREIGN KEY (ROAD) REFERENCES ROAD(NAME) ON DELETE CASCADE -- todo simulation.scenario.terminal
) ENGINE=InnoDB;

CREATE TABLE MISSION_LOAD (
	ID bigint(20) unsigned AUTO_INCREMENT not null,
	T TIME not null,
	TW_MIN TIME not null,
	TW_MAX TIME not null,
	MISSION VARCHAR(30) not null,
	STARTABLE_TIME TIME not null,
	STATE smallint(1) not null REFERENCES LOAD_STATE(ID) ON DELETE CASCADE,
	PHASE smallint(1) unsigned not null REFERENCES LOAD_PHASE(ID) ON DELETE CASCADE,
	EFFECTIVE_START_TIME TIME null,
	PICKUP_REACH_TIME TIME null, 
	LOAD_START_TIME TIME null,
	LOAD_END_TIME TIME null,
	DELIVERY_START_TIME TIME null,
	DELIVERY_REACH_TIME TIME null,
	UNLOAD_START_TIME TIME null,
	END_TIME TIME null,
	WAIT_TIME TIME null,
	LINKED_LOAD bigint(20) unsigned null REFERENCES MISSION_LOAD(ID) ON DELETE CASCADE,
	PRIMARY KEY(ID),
	INDEX(MISSION,STATE,PHASE,LINKED_LOAD),
	CONSTRAINT FOREIGN KEY (STATE) REFERENCES LOAD_STATE(ID) ON DELETE CASCADE,
	CONSTRAINT FOREIGN KEY (PHASE) REFERENCES LOAD_PHASE(ID) ON DELETE CASCADE,
	CONSTRAINT FOREIGN KEY (LINKED_LOAD) REFERENCES MISSION_LOAD(ID) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1;

CREATE TABLE STRADDLECARRIERS_WORKLOAD(
  STRADDLECARRIER_NAME VARCHAR(30) not null REFERENCES STRADDLECARRIER(NAME) ON DELETE CASCADE,
  SIMULATION smallint(6) unsigned not null REFERENCES SIMULATION(ID) ON DELETE CASCADE,
  T TIME not null,
  LOAD_ID bigint(20) unsigned not null REFERENCES MISSION_LOAD(ID) ON DELETE CASCADE,
  LOAD_INDEX smallint(3) unsigned not null,  
  PRIMARY KEY(STRADDLECARRIER_NAME,SIMULATION,T,LOAD_ID),
  CONSTRAINT FOREIGN KEY (STRADDLECARRIER_NAME) REFERENCES STRADDLECARRIER(NAME) ON DELETE CASCADE, -- todo : simmulation.scenario
  CONSTRAINT FOREIGN KEY (SIMULATION) REFERENCES SIMULATION(ID) ON DELETE CASCADE,
  CONSTRAINT FOREIGN KEY (LOAD_ID) REFERENCES MISSION_LOAD(ID) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE TERMINALDB.RESULTS(
  SIMULATION smallint(6) unsigned NOT NULL REFERENCES SIMULAION(ID) ON DELETE CASCADE,
  DISTANCE DOUBLE DEFAULT 0.0,
  LATENESS DOUBLE DEFAULT 0.0,
  EARLINESS DOUBLE DEFAULT 0.0,
  OT smallint(3) unsigned NOT NULL DEFAULT 0,
  TIME DOUBLE DEFAULT 0.0,
  SCHEDULING_TIME DOUBLE DEFAULT 0.0,
  PRIMARY KEY(SIMULATION)
) ENGINE=InnoDB;

CREATE TABLE SCHEDULING_PARAMETER(
ID bigint(20) unsigned AUTO_INCREMENT not null,
NAME VARCHAR(20) NOT NULL,
VALUE VARCHAR(255) NULL,
PRIMARY KEY (ID)
) ENGINE=InnoDB;

CREATE TABLE SIMULATION_SCHEDULING_PARAMETERS (
	ID bigint(20) unsigned AUTO_INCREMENT not null,
	ID_PARAM bigint(20) unsigned not null REFERENCES SCHEDULING_PARAMETER(ID) ON DELETE CASCADE,
	ID_SIM smallint(6) unsigned NOT NULL REFERENCES SIMULAION(ID) ON DELETE CASCADE,
	PRIMARY KEY(ID),
	CONSTRAINT FOREIGN KEY (ID_PARAM) REFERENCES SCHEDULING_PARAMETER(ID) ON DELETE CASCADE,
	CONSTRAINT FOREIGN KEY (ID_SIM) REFERENCES SIMULATION(ID) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE DEFAULT_SCHEDULING_PARAMETERS (
	PARAM_NAME VARCHAR(30) not null,
	VALUE VARCHAR(255) not null,
	PRIMARY KEY(PARAM_NAME)
)ENGINE=InnoDB;

INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('ALPHA','1.0');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('BETA','1.0');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('GAMMA','1.0');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('DELTA','0.01');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('LAMBDA','1.5');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('LAMBDA_RETURN','0.0');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('LAMBDAR','0.0');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('ETA','0.99');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('SYNC','100');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('F1','1.0');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('F2','5.0');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('F3','0.0');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('L','10.0');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('T','1.0');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('E','0.1');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('RHO','0.99');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('solutionInitFile','etc/conf/branchAndBound/solutionInitFile.dat');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('solutionFile','etc/conf/branchAndBound/solutionFile.dat');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('timeMatrixFile','etc/conf/branchAndBound/timeMatrixFile.dat');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('distanceMatrixFile','etc/conf/branchAndBound/distanceMatrixFile.dat');
INSERT INTO DEFAULT_SCHEDULING_PARAMETERS (PARAM_NAME, VALUE) VALUES ('COMPUTE_COST', 1);


